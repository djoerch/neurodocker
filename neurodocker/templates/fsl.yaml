# Instructions to install FSL.
#
# *****************************************************************************
# FSL is non-free. If you are considering commercial use of FSL, please consult
# the relevant license.
# *****************************************************************************
#
# Website: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/
# License: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence
# Available Versions: https://fsl.fmrib.ox.ac.uk/fsldownloads/manifest.json
#
# Documentation for source build: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FslInstallation/SourceCode

name: fsl
alert: FSL is non-free. If you are considering commercial use of FSL, please consult the relevant license(s).
binaries:
  arguments:
    required:
    - version
    optional:
      install_path: /opt/fsl-{{ self.version }}
      exclude_paths: ""
  urls:
    "6.0.5.2": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.5.2-centos7_64.tar.gz
    "6.0.5.1": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.5.1-centos7_64.tar.gz
    "6.0.5": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.5-centos7_64.tar.gz
    "6.0.4": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.4-centos6_64.tar.gz
    "6.0.3": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.3-centos6_64.tar.gz
    "6.0.2": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.2-centos6_64.tar.gz
    "6.0.1": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.1-centos6_64.tar.gz
    "6.0.0": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.0-centos6_64.tar.gz
    "5.0.11": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.11-centos6_64.tar.gz
    "5.0.10": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz
    "5.0.9": https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.9-centos6_64.tar.gz
    "5.0.8": https://fsl.fmrib.ox.ac.uk/fsldownloads/oldversions/fsl-5.0.8-centos6_64.tar.gz
  dependencies:
    apt:
    - bc
    - ca-certificates
    - curl
    - dc
    - file
    - libfontconfig1
    - libfreetype6
    - libgl1-mesa-dev
    - libgl1-mesa-dri
    - libglu1-mesa-dev
    - libgomp1
    - libice6
    - libopenblas-base
    - libxcursor1
    - libxft2
    - libxinerama1
    - libxrandr2
    - libxrender1
    - libxt6
    - nano
    - sudo
    - wget
    yum:
    - bc
    - curl
    - file
    - libGL
    - libGLU
    - libICE
    - libSM
    - libX11
    - libXcursor
    - libXext
    - libXft
    - libXinerama
    - libXrandr
    - libXt
    - libgomp
    - libjpeg
    - libmng
    - libpng12
    - nano
    - openblas-serial
    - sudo
    - wget
  env:
    FSLDIR: "{{ self.install_path }}"
    PATH: "{{ self.install_path }}/bin:$PATH"
    FSLOUTPUTTYPE: "NIFTI_GZ"
    FSLMULTIFILEQUIT: "TRUE"
    FSLTCLSH: "{{ self.install_path }}/bin/fsltclsh"
    FSLWISH: "{{ self.install_path }}/bin/fslwish"
    FSLLOCKDIR: ""
    FSLMACHINELIST: ""
    FSLREMOTECALL: ""
    FSLGECUDAQ: "cuda.q"
  instructions: |
    {{ self.install_dependencies() }}
    echo "Downloading FSL ..."
    mkdir -p {{ self.install_path }}
    curl -fL {{ self.urls[self.version] }} \
    | tar -xz -C {{ self.install_path }} --strip-components 1 {% if self.exclude_paths -%}\
    {%- for exclude_path in self.exclude_paths.split() %}
      {% if not loop.last -%}
      --exclude='{{ exclude_path }}' \
      {%- else -%}
      --exclude='{{ exclude_path }}'
      {%- endif -%}
    {%- endfor %}
    {%- endif %}
    {% if self.version not in ("5.0.9", "5.0.8", "6.0.5.2") -%}
    echo "Installing FSL conda environment ..."
    bash {{ self.install_path }}/etc/fslconf/fslpython_install.sh -f {{ self.install_path }}
    {% endif -%}
    {% if self.version in ("6.0.1") -%}
    echo "Downgrading deprecation module per https://github.com/kaczmarj/neurodocker/issues/271#issuecomment-514523420"
    {{ self.install_path }}/fslpython/bin/conda install -n fslpython -c conda-forge -y deprecation==1.*
    echo "Removing bundled with FSLeyes libz likely incompatible with the one from OS"
    rm -f {{ self.install_path }}/bin/FSLeyes/libz.so.1
    {% endif -%}

source:
  arguments:
    required:
      - version
    optional:
      install_path: /opt/fsl-{{ self.version }}
      build_processes: "8"
      url: https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-{{ self.version }}-sources.tar.gz
  dependencies:
    apt:
      - ca-certificates
      - curl
      - tar
      - nano
      - libexpat-dev
      - libx11-dev
      - mesa-utils
      - zlib1g-dev
      - libblas-dev
      - liblapack-dev
      - build-essential
      - autotools-dev
      - automake
      - libxml2-dev
      - libxml++2.6-dev
      - libopenblas-dev
      - nvidia-cuda-toolkit
      - git
      - python
      - python-setuptools
      - vtk7
      - libvtk7-dev
    yum:
      - expat-devel
      - libX11-devel
      - mesa-libGL-devel
      - zlib-devel
  env:
    FSLDIR: "{{ self.install_path }}"
  instructions: |
    echo "Installation of FSL v{{ self.version}}..."
    {% if self.version != "6.0.5.2"-%} \
    echo "Version {{ self.version }} not supported!" \
    echo "Need version==6.0.5.2!" \
    exit 255 \
    {% endif -%} \
    {{ self.install_dependencies() }}
    ls {{ self.install_path }}
    echo \
      "Removing words 'libxmlpp' and 'libxml2-2.9.2' from 'extras/build' ..."
    sed -i 's/libxmlpp//g' "{{ self.install_path }}/extras/build"
    sed -i 's/libxml2-2.9.2//g' "{{ self.install_path }}/extras/build"
    echo \
      "... done."
    echo \
      "Adding '-lopenblas' to 'LIBS' in Makefile of subpackages ..."
    SUBPACKAGES="meshclass topup eddy CiftiLib-master bint fslsurface libmeshutils \
      newmesh DiscreteOpt FastPDlib MSMRegLib avwutils bet2 cluster fast4 fdt film \
      filmbabe first flameo flirt fnirt fugue gps lesions mcflirt melodic miscvis \
      mist mm MSM oxford_asl possum ptx2 qboot randomise siena slicetimer susan swe \
      tbss"
    for subpackage in ${SUBPACKAGES}; \
    do \
        sed \
          -e '/^LIBS/{s/$/ -lopenblas/}' \
          -i "{{ self.install_path }}/src/${subpackage}/Makefile"; \
    done
    echo \
      "... done."
    echo \
      "Adding '-lopenblas' to 'DLIBS' in Makefile of subpackages ..."
    SUBPACKAGES="qboot fdt ptx2"
    for subpackage in ${SUBPACKAGES}; \
    do \
        sed \
          -e '/^DLIBS/{s/$/ -lopenblas/}' \
          -i "{{ self.install_path }}/src/${subpackage}/Makefile"; \
    done
    echo \
      "... done."
    echo \
      "Adding '-lm' to 'LIBS' in Makefile of 'miscvis' \
      (the order of libs matters; -lm is used by -lpng \
      and must therefore appear after -lpng) ..."
    sed -e '/^LIBS/{s/$/ -lm/}' -i "{{ self.install_path }}/src/miscvis/Makefile"
    echo \
      "... done."
    echo \
      "Adding '-lopenblas' to 'LIBCC' in Makefile of 'siena' ..."
    sed -e '/^LIBCC/{s/$/ -lopenblas/}' -i "{{ self.install_path }}/src/siena/Makefile"
    echo \
      "... done."
    echo \
      "Adding '-lopenblas' to 'CLIBS' in Makefile of 'cluster' ..."
    sed -e '/^CLIBS/{s/$/ -lopenblas/}' -i "{{ self.install_path }}/src/cluster/Makefile"
    echo \
      "... done."
    echo \
      "Adding '-lopenblas' to 'LDLIBS' \
      and move '\${SQLITE_LIB}/libsqlite3.a' to the front in Makefile of 'mist' ..."
    sed \
      -e '/^LDLIBS/{s/^LDLIBS =/LDLIBS = ${SQLITE_LIB}\/libsqlite3.a/}' \
      -i "{{ self.install_path }}/src/mist/Makefile"
    sed \
      -e '/LIBRT\}$/{s/${SQLITE_LIB}\/libsqlite3.a//}' \
      -i "{{ self.install_path }}/src/mist/Makefile"
    sed \
      -e '/LIBRT\}$/{s/$/ -lopenblas/}' \
      -i "{{ self.install_path }}/src/mist/Makefile"
    echo \
      "... done."
    echo \
      "Adding '-lopenblas' to 'FMBLIBS' in Makefile of 'first' ..."
    sed -e '/^FMBLIBS/{s/$/ -lopenblas/}' -i "{{ self.install_path }}/src/first/Makefile"
    echo \
      "... done."
    echo \
      "Adding '-std=c++11' to 'CPPFLAGS' in Makefile of subpackages ..."
    SUBPACKAGES='CiftiLib-master flameo'
    for subpackage in ${SUBPACKAGES}; \
    do \
        sed \
          -e '/^PROJNAME/a CPPFLAGS = -std=c++11' \
          -i "{{ self.install_path }}/src/${subpackage}/Makefile"; \
    done
    echo \
      "... done."
    echo \
      "Adding '-std=c++11' to 'OPTFLAGS' in Makefile of 'melodic' ..."
    sed -e '/^OPTFLAGS/{s/$/ -std=c++11/}' -i "{{ self.install_path }}/src/melodic/Makefile"
    echo \
      "... done."
    echo \
      "Updating CUDA settings in 'buildSettings.mk' ..."
    sed \
      -e '/^CUDA_INSTALLATION/c CUDA_INSTALLATION = /usr' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    sed \
      -e '/^LIB_CUDA/c LIB_CUDA = ${CUDA_INSTALLATION}/lib/x86_64-linux-gnu' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    sed \
      -e '/^INC_CUDA/c INC_CUDA = ${CUDA_INSTALLATION}/include' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    sed \
      -e '/^NVCC/c NVCC = ${CUDA_INSTALLATION}/bin/nvcc' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    CUDAVER=$(nvcc --version | grep release | sed 's/.*release \([0-9]\+\.[0-9]\).*/\1/')
    sed \
      -e "/^CUDAVER/c CUDAVER := \$(or \$(CUDAVER),${CUDAVER})" \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    sed \
      -e "/^EDDYBUILDPARAMETERS/c EDDYBUILDPARAMETERS = \"cuda=1 CUDAVER=${CUDAVER}\"" \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    echo \
      "... done."
    echo \
      "INFO: NOT adding section for CUDA version to 'config/common/supportedGencodes.sh' ..."    
    echo \
      "Updating library paths for 'libxml2' ..."
    sed \
      -e '/^INC_XML2/c INC_XML2 = /usr/include/libxml2' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    echo \
      "... done."
    echo \
      "Updating library paths for 'libxml++-2.6' ..."
    sed \
      -e '/^INC_XML++ =/c INC_XML++ = /usr/include/libxml++-2.6' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    sed \
      -e '/^INC_XML++CONF =/c INC_XML++CONF = /usr/lib/x86_64-linux-gnu/libxml++-2.6/include' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    echo \
      "... done."
    echo \
      "Updating library paths for 'vtk' ..."
    sed \
      -e '/^VTKDIR_INC/c VTKDIR_INC = /usr/include/vtk-7.1' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    sed \
      -e '/^VTKDIR_LIB/c VTKDIR_LIB = /usr/lib/x86_64-linux-gnu' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    sed \
      -e '/^VTKSUFFIX/c VTKSUFFIX = -7.1' \
      -i "{{ self.install_path }}/config/buildSettings.mk"
    echo \
      "... done."
    echo \
      "Setting up build environment ..."
    export FSLDIR="{{ self.install_path }}"
    . ${FSLDIR}/etc/fslconf/fsl.sh
    export FSLDEVDIR=${FSLDIR}
    export FSLCONFDIR=${FSLDIR}/config
    echo \
      "... done."
    echo \
      "Launching regular build script ..."
    cd ${FSLDIR}
    MAKEOPTIONS="-j {{ self.build_processes }}" ${FSLDIR}/build | 0
    echo \
      "... done."
    echo \
      "Launching individual builds for the failing subpackages ..."
    SUBPACKAGES="fslsurface newmesh DiscreteOpt FastPDlib MSMRegLib fdt film MSM ptx2"
    for subpackage in ${SUBPACKAGES}; \
    do \
        cd ${FSLDIR}/src/${subpackage}; \
        MAKEOPTIONS="-j {{ self.build_processes }}" make install; \
        cd ${FSLDIR}; \
    done
    echo \
      "... done."
#    mkdir -p {{ self.install_path }}
#    echo "Downloading FSL sources ..."
#    curl -fL {{ self.url }} \
#    | tar -xz -C {{ self.install_path }} --strip-components 1
